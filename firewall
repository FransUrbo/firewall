#!/bin/sh

# $Id: firewall,v 1.30 2006-11-20 13:38:30 turbo Exp $
#DEBUG="echo "
CONFIG=/etc/firewall.conf

if [ ! -f $CONFIG ]; then
    # The config file don't exists, load this script with default values...
    echo -n "Loading default firewall values... "

    # Where is the iptables, rmmod and modprobe binaries?
    IPTABLES=/sbin/iptables
    RMMOD="/sbin/rmmod"
    MODPROBE="/sbin/modprobe"
    #
    # External ethernet device
    EXTERNAL_ETH=eth0
    #
    # If defined, see 'ALLOW' below for ports to allow on local network
    # - 'size' of network. 24 => a C-Net
    EXTERNAL_NET=24
    
    # ----- PORTS TO BLOCK ----
    # ':' is a range... So ':19' means '0 to 19'...
    PORTS=":19"				# Block: 0-19
    PORTS="$PORTS 26:52"		# Open:  ssh, telnet, smtp
    PORTS="$PORTS 54:79"		# Open:  domain
    PORTS="$PORTS 81:87"		# Open:  http
    PORTS="$PORTS 89:109"		# Open:  kerberos, pop3
    PORTS="$PORTS 111"			# Close: SunRPC
    PORTS="$PORTS 115:142"		# Open:  Auth, SFTP
    PORTS="$PORTS 144:388"		# Open:  ldap
    PORTS="$PORTS 390:442"		# Open:  imap2
    PORTS="$PORTS 444:635"		# Open:  https
    PORTS="$PORTS 637:992"		# Open:  ldaps
    PORTS="$PORTS 994"			# Open:  imaps
    PORTS="$PORTS 996:1023"		# Open:  pop3s
    PORTS="$PORTS 1061 1214 1832"	# Block: Crappy filesharing protocols
    PORTS="$PORTS 3306"			# Block: mysql
    PORTS="$PORTS 6000"			# Block: X11
    
    # ----- PORTS TO ALLOW ON LOCAL NET -----
    ALLOW="137:139"			# SMB/Samba
    ALLOW="$ALLOW 2988"			# AFbackup system
    
    echo "done."
else
    # Load the config file...
    echo -n "Loading the firewall config file... "
    . $CONFIG
    echo "done."
fi


# -------
# DONE WITH LOCAL CONFIGURATIONS. DON'T CHANGE ANYTHING BELOW!
# -------


# --------------------------------
# Output the error message, and exit with error code
error () {
    code=$1
    shift
    msg=$*

    echo $msg
    exit $code
}

# --------------------------------
# Find the IP address on the external interface
get_ip () {
    # Get the external IP address
    set -- `ifconfig $EXTERNAL_ETH | grep inet`; shift
    EXTERNAL_IP=`echo $1 | sed 's@addr:@@'`

    if [ ! -z "$EXTERNAL_NET" ]; then
	EXTERNAL_NET="$EXTERNAL_IP/$EXTERNAL_NET"
    else
	# Got to have SOME default (othervise iptables
	# complain about faulty netmask '').
	EXTERNAL_NET="$EXTERNAL_IP/24"
    fi

    # Get the internal IP address
    if [ "$INTERNAL_ETH" != "" ]; then
	set -- `ifconfig $INTERNAL_ETH | grep inet`; shift
	INTERNAL_IP=`echo $1 | sed 's@addr:@@'`
	INTERNAL_NET="$INTERNAL_IP/$INTERNAL_NET"

	if echo $INTERNAL_ETH | grep -q ':'; then
	    # It's an alias!
	    INTERNAL_ETH=`echo $INTERNAL_ETH | sed 's@:.*@@'`
       fi
    fi

    # Return ok if we have an external IP, and the internal IP is found
    # If we haven't specified a internal ethernet interface, ignore the
    # unavilible internal IP...
    if [ "$EXTERNAL_IP" = "" -o "$INTERNAL_IP" = "" -a "$INTERNAL_ETH" != "" ]; then
        return 0
    fi

    # We have failed to obtain the IP addresses!
    return 1
}

# --------------------------------
# Load a module
load_module () {
    $MODPROBE $1 > /dev/null 2>&1
    return $?
}

# --------------------------------
# This is the main logic. Add/Remove the firewall rules we specify in the
# config file
chains () {
    CMD=$1

    if [ "$CMD" = "add" ]; then
        CHAIN="-A INPUT "
	ECHO="Setting up"
    else
        CHAIN="-D INPUT "
	ECHO="Removing"
    fi
    CHAIN="$DEBUG$IPTABLES $CHAIN"

    # -------------
    # Some local exeptions
    if [ "$EXTERNAL_NET" != "" -a "$ALLOW" != "" ]; then
	echo -n "$ECHO local accepts: " ; [ -n "$DEBUG" ] && echo

	for port in $ALLOW; do
	    [ -z "$DEBUG" ] && echo -n "$port "
	    if [ "$EXTERNAL_NET" != "" ]; then
		$CHAIN -i $EXTERNAL_ETH -s $EXTERNAL_NET -d $EXTERNAL_IP -j ACCEPT --protocol tcp --dport $port
		$CHAIN -i $EXTERNAL_ETH -s $EXTERNAL_NET -d $EXTERNAL_IP -j ACCEPT --protocol udp --dport $port
	    fi
	done
	[ -z "$DEBUG" ] && echo " done."
	[ -n "$DEBUG" ] && echo ""
    fi

    # -------------
    # Setting up accepts on PORT to/from our local network
    if [ "$INTERNAL_NET" != "" -a "$INTERNAL_ETH" != "" ]; then
	echo -n "$ECHO accept to/from the internal network: " ; [ -n "$DEBUG" ] && echo

	for port in $PORTS; do
	    [ -z "$DEBUG" ] && echo -n "$port "
	    $CHAIN -i $INTERNAL_ETH -s $INTERNAL_NET -d $INTERNAL_IP -j ACCEPT --protocol tcp --dport $port
	    $CHAIN -i $INTERNAL_ETH -s $INTERNAL_NET -d $INTERNAL_IP -j ACCEPT --protocol udp --dport $port
	done
	echo
    fi

    # -------------
    # Special circumstances - friendly hosts outside the external network
    if [ ! -z "$FRIENDLY" ]; then
	echo -n "$ECHO friendly hosts: " ; [ -n "$DEBUG" ] && echo

	for friend in $FRIENDLY; do
	    [ -z "$DEBUG" ] && echo -n "$friend "

	    set -- `echo $friend | sed 's@:@ @g'` ; host=$1 ; port=$2
	    [ ! -z "$port" ] && port="--dport $port"

	    $CHAIN -i $EXTERNAL_ETH -s $host -d $EXTERNAL_IP -j ACCEPT --protocol tcp $port
	    $CHAIN -i $EXTERNAL_ETH -s $host -d $EXTERNAL_IP -j ACCEPT --protocol udp $port
	done
	echo
    fi

    # -------------
    if [ ! -z "$DO_IPSEC_RULES" ]; then
	# IPSEC hack
	echo -n "$ECHO IPSEC rules: " ; [ -n "$DEBUG" ] && echo
	$CHAIN -t mangle -i $EXTERNAL_ETH -p udp --dport  500 -j MARK --set-mark 1
	$CHAIN -t mangle -i $EXTERNAL_ETH -p udp --dport 4500 -j MARK --set-mark 1
	$CHAIN -t mangle -i $EXTERNAL_ETH -p esp              -j MARK --set-mark 1
	$CHAIN -t mangle -i $EXTERNAL_ETH -p  ah              -j MARK --set-mark 1

	$CHAIN -m mark --mark 1 -j ACCEPT
	$DEBUG$IPTABLES -A FORWARD -m mark --mark 1 -j ACCEPT
	echo
    fi

    # -------------
    # Setup protection from syn-floods, port scans and ping-of-death etc.
    if [ ! -z "$DO_SYNPROT" ]; then
	echo -n "$ECHO syn-flood etc protection: " ; [ -n "$DEBUG" ] && echo
	$DEBUG$IPTABLES -A FORWARD -m limit -j LOG
	$DEBUG$IPTABLES -A FORWARD -p tcp --syn -m limit --limit 1/s -j ACCEPT
	$DEBUG$IPTABLES -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j ACCEPT
	$DEBUG$IPTABLES -A FORWARD -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT
	echo
    fi

    # -------------
    # Setup brute force limits
    if [ ! -z "$BRUTE_RULE" ]; then
	echo -n "$ECHO brute force limits: " ; [ -n "$DEBUG" ] && echo

	if [ ! -z "$BRUTE_LIMIT" ]; then
	    set -- `echo $BRUTE_LIMIT | sed -e 's@ .*@@g' -e 's@:@ @'` ; attempts=$1 ; within=$2
	else
	    attempts=4 ; within=60
	fi

	# Setup SSH connection attempts limits
	for brute in $BRUTE_RULE; do
	    [ -z "$DEBUG" ] && echo -n "$brute "

	    set -- `echo $brute | sed 's@:@ @g'` ; port=$1 ; name=$2
	    list="$name"_WHITELIST ; logprefix="$name"_brute_force

	    # Setup the whitelist jump table
	    if [ "$CMD" = "add" ]; then
		$DEBUG$IPTABLES -N $list
	    fi		

	    $CHAIN -p tcp --dport $port -m state --state NEW -m recent \
		--set --name $name
	    $CHAIN -p tcp --dport $port -m state --state NEW -j $list
	    $CHAIN -p tcp --dport $port -m state --state NEW -m recent \
		--update --seconds $within --hitcount $attempts --rttl \
		--name $name -j LOG --log-prefix $logprefix
	    $CHAIN -p tcp --dport $port -m state --state NEW -m recent \
		--update --seconds $within --hitcount $attempts --rttl \
		--name $name -j DROP

	    if [ "$CMD" = "rem" ]; then
		# Remove the whitelist jump table
		$DEBUG$IPTABLES -X $list
	    fi
	done
	echo
    fi

    # -------------
    # Add/Remove friendly host(s) to brute force whitelists
    if [ ! -z "$BRUTE_RULE" -a ! -z "$FRIENDLY" ]; then
	for brute in $BRUTE_RULE; do
	    set -- `echo $brute | sed 's@:@ @g'` ; port=$1 ; name=$2
	    list="$name"_WHITELIST

	    echo -n "$ECHO $name whitelisting: " ; [ -n "$DEBUG" ] && echo

	    for friend in 127.0.0.1 $EXTERNAL_IP $FRIENDLY; do
		set -- `echo $friend | sed 's@:@ @g'` ; host=$1
		[ -z "$DEBUG" ] && echo -n "$host "

		if [ "$CMD" = "add" ]; then
		    $DEBUG$IPTABLES -A $list -s $host -d $EXTERNAL_IP \
			-j ACCEPT -m recent --remove --name $name
		else
		    $DEBUG$IPTABLES -D $list -s $host -d $EXTERNAL_IP \
			-j ACCEPT -m recent --remove --name $name
		fi
	    done

	    if [ "$CMD" = "del" ]; then
		$DEBUG$IPTABLES -X $list
	    fi
	    echo
	done
    fi

    # -------------
    # Setting up TCP rejects
    echo -n "$ECHO TCP rejects on external IP: " ; [ -n "$DEBUG" ] && echo
    for port in $PORTS; do
	[ -z "$DEBUG" ] && echo -n "$port "
	$CHAIN -i $EXTERNAL_ETH -s 0/0 -d $EXTERNAL_IP -j REJECT --reject-with tcp-reset --protocol tcp --dport $port
    done
    echo

    # -------------
    # Setting up UDP rejects
    echo -n "$ECHO UDP rejects on external IP: " ; [ -n "$DEBUG" ] && echo
    for port in $PORTS; do
	[ -z "$DEBUG" ] && echo -n "$port "
	$CHAIN -i $EXTERNAL_ETH -s 0/0 -d $EXTERNAL_IP -j DROP --protocol udp --dport $port
    done
    echo

    # -------------
    # Deny connections to 127.0.0.1 via external interface
    echo -n "$ECHO connections to 127.0.0.1 via external interface" ; [ -n "$DEBUG" ] && echo
    $CHAIN -i ! lo -s 127.0.0.0/8 -j DROP
    $CHAIN -i ! lo -d 127.0.0.0/8 -j DROP
    echo
}

# --------------------------------
# Make sure we have the binaries...
if [ ! -x `echo $IPTABLES | sed 's@\ .*@@'` -o ! -x `echo $RMMOD | sed 's@\ .*@@'` -o ! -x `echo $MODPROBE | sed 's@\ .*@@'` ]; then
    echo "Some (or all) executables don't exists or isn't executable..."
    exit 1
fi

# --------------------------------
# Are we running a iptables enabled kernel!?
if [ -f "/proc/ksyms" ]; then
    ksyms=/proc/ksyms
elif [ -f "/proc/kallsyms" ]; then
    ksyms=/proc/kallsyms
else
    echo 'No /proc/{ksyms,kallsyms} file!?'
    exit 1
fi

for module in ip_tables iptable_filter ip_conntrack ipt_state ipt_recent ipt_LOG ipt_REJECT; do
    modprobe $module
done

if ! cat $ksyms | grep -q ip_tables; then
    # Module not loaded, or no support for ip tables...

    if [ ! -f "/lib/modules/`uname -r`/kernel/net/ipv4/netfilter/ip_tables.o" ]; then
	echo "You're not running a iptables enabled kernel!"
	exit 2
    else
	modprobe ip_tables
    fi
fi

#####################################
#                                   #
# M A I N  P R O G R A M  B E L O W #
#                                   #
#####################################

# Get the required IP addresses (internal/external)
get_ip && error 1 "Error in getting IP address(es)..."

case "$1" in
    start)
	# Set up TCP/UDP rejects and accepts
	chains add

	CHAIN="$DEBUG$IPTABLES -t nat"

	# -------------
	# Do portforwarding
	if [ "$PORTS_FW" != "" ]; then
	    echo -n "Forwarding external port: " ; [ -n "$DEBUG" ] && echo
	    for entry in $PORTS_FW; do
		set -- `echo $entry | sed 's@:@ @g'`

		if echo $1 | grep -q \-; then
		    # Range mapping
		    [ -z "$DEBUG" ] && echo -n "$1->$2->$1"
		    DEST=$2
		    set -- `echo $1 | sed 's@-@ @'`
		    i=$1
		    while [ "$i" -le "$2" ]; do
			$CHAIN -A PREROUTING -p tcp -d $EXTERNAL_IP --dport $i -j DNAT --to $DEST:$i

			# Forward UDP port as well. TODO: Config option to specify if this is wanted?
			$CHAIN -A PREROUTING -p udp -d $EXTERNAL_IP --dport $i -j DNAT --to $DEST:$i

			i=`expr $i + 1`
		    done
		else
		    # 1 to 1 mapping
		    [ -z "$DEBUG" ] && echo -n "$1->$2:$3 "
		    $CHAIN -A PREROUTING -p tcp -d $EXTERNAL_IP --dport $1 -j DNAT --to $2:$3

		    if grep -q $1/udp /etc/services; then
			# There's a UDP entry for this port. Better to forward that to...
			$CHAIN -A PREROUTING -p udp -d $EXTERNAL_IP --dport $1 -j DNAT --to $2:$3
		    fi
		fi
	    done
	    echo ""
	fi

	# -------------
	# Masquerade internal traffic
	if [ "$INTERNAL_NET" != "" -a "$INTERNAL_ETH" != "" ]; then
	    echo -n "Setting up masquerading of network $INTERNAL_NET on $INTERNAL_ETH... " ; [ -n "$DEBUG" ] && echo
	    [ -z "$DEBUG" ] && echo 1 > /proc/sys/net/ipv4/ip_forward 
	    [ -z "$DEBUG" ] && load_module ip_nat_ftp
	    [ -z "$DEBUG" ] && load_module ip_nat_irc

	    $CHAIN -A POSTROUTING -s $INTERNAL_NET -d 0/0 -j MASQUERADE
	    [ -z "$DEBUG" ] && echo " done."
	    [ -n "$DEBUG" ] && echo ""

	    if [ "$PPTP_SERVER" != "" -a "$PPTP_CLIENT" != "" ]; then
		echo -n "VPN masquerading $PPTP_CLIENT to $PPTP_SERVER: "
		[ -z "$DEBUG" ] && load_module ip_nat_pptp
		$CHAIN -A PREROUTING -p tcp --dport 1723 -j DNAT --top $PPTP_CLIENT
		$CHAIN -A PREROUTING -p 47 -j DNAT --top $PPTP_CLIENT
		echo "done."
	    fi
	fi

	# -------------
	# Enable the transparent proxy (force all connection through the proxy)
	if [ ! -z "$TRANS_PROXY" -a "$TRANS_PROXY" != "0" ]; then
	    echo -n "Setting up transparent proxy: "
	    $CHAIN -A PREROUTING -s $INTERNAL_NET -d 0/0 --protocol tcp --destination-port 80 -j REDIRECT --to-ports $TRANS_PROXY
	    echo "done."
	fi

	# -------------
	# Execute local scripts
	if [ -x "$0.local" -a -z "$DEBUG" ]; then
	    $0.local start
	fi

	# -------------
	# Block specific hosts. Probably spammers/portscanners...
	if [ -f "/etc/firewall.block.conf" -a -x "/usr/local/sbin/reject_ip" -a -z "$DEBUG" ]; then
	    /usr/local/sbin/reject_ip add
	fi
	;;

    stop)
	# Remove the TCP/UDP rejects and accepts
	chains del

	# -------------
	# Disable the portforwarding
	if [ "$PORTS_FW" != "" ]; then
	    echo -n "Removing port forwarding of port: " ; [ -n "$DEBUG" ] && echo
	    for entry in $PORTS_FW; do
		set -- `echo $entry | sed 's@:@ @g'`
		[ -z "$DEBUG" ] && echo -n "$1 "
		$DEBUG$IPTABLES -t nat -D PREROUTING -p tcp -d $EXTERNAL_IP --dport $1 -j DNAT  --to $2:$3
	    done
	    [ -z "$DEBUG" ] && echo " done."
	    [ -n "$DEBUG" ] && echo ""
	fi

	# -------------
	# Portforwarding of internal traffic
	if [ "$INTERNAL_NET" != "" ]; then
	    echo -n "Removing internal network masquerading... " ; [ -n "$DEBUG" ] && echo
	    $DEBUG$IPTABLES -t nat -D POSTROUTING -s $INTERNAL_NET -d 0/0 -j MASQUERADE

	    [ -z "$DEBUG" ] && echo 0 > /proc/sys/net/ipv4/ip_forward 

	    if [ "$PPTP_SERVER" != "" -a "$PPTP_CLIENT" != "" ]; then
		$DEBUG$IPTABLES -t nat -D PREROUTING -p tcp --dport 1723 -j DNAT --top $PPTP_CLIENT
		$DEBUG$IPTABLES -t nat -D PREROUTING -p 47 -j DNAT --top $PPTP_CLIENT

	    fi
	    [ -z "$DEBUG" ] && echo " done."
	    [ -n "$DEBUG" ] && echo ""

	    echo -n "Unloading module: " ; [ -n "$DEBUG" ] && echo
	    for module in ip_nat_ftp ip_conntrack_ftp ip_nat_irc ip_conntrack_irc ip_nat_pptp ip_conntrack_pptp ipt_MASQUERADE iptable_nat ip_conntrack ipt_REJECT iptable_filter ip_tables; do
		[ -z "$DEBUG" ] && echo -n "$module "
		$DEBUG$RMMOD $module 2> /dev/null
	    done
	    echo
	fi

	# -------------
	# Execute local scripts
	if [ -x "$0.local" -a -z "$DEBUG" ]; then
	    $0.local stop
	fi

	# -------------
	# Remove the specific host blocks
	if [ -f "/etc/firewall.block.conf" -a -x "/usr/local/sbin/reject_ip" -a -z "$DEBUG" ]; then
	    for ip in `cat /etc/firewall.block.conf`; do
		$CHAIN -i $EXTERNAL_ETH -d $EXTERNAL_IP -j REJECT --reject-with tcp-reset -s $ip --protocol tcp
		$CHAIN -i $EXTERNAL_ETH -d $EXTERNAL_IP -j DROP -s $ip --protocol udp
	    done
	fi
	;;

    flush)
	echo -n "Flushing firewall rules... "
	$DEBUG$IPTABLES -F
	$DEBUG$IPTABLES -F -t nat

	for chain in `iptables -L -n | grep ^Chain | sed -e 's@^Chain @@' -e 's@ .*@@' | egrep -v 'INPUT|FORWARD|OUTPUT'`; do
	    $DEBUG$IPTABLES -X $chain
	done

	# TODO: Clean the '*_WHITELIST's    (?)
	# TODO: Clean the '-m recent' rules (?)
	echo "done."
	;;
    *)
	echo "Usage: $0 {start|stop}" >&2
	;;
esac
exit 0
