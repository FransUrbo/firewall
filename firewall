#!/bin/sh

# $Id: firewall,v 1.18 2003-10-31 09:13:32 turbo Exp $

if [ ! -f /etc/firewall.conf ]; then
    # The config file don't exists, load this script with default values...

    echo -n "Loading default firewall values... "
    # Where is the iptables, rmmod and modprobe binaries?
    IPTABLES=/sbin/iptables
    RMMOD="/sbin/rmmod"
    MODPROBE="/sbin/modprobe > /dev/null 2>&1 "
    #
    # External ethernet device
    EXTERNAL_ETH=eth0
    #
    # If defined, see 'ALLOW' below for ports to allow on local network
    # - 'size' of network. 24 => a C-Net
    EXTERNAL_NET=24
    
    # ----- PORTS TO BLOCK ----
    # ':' is a range... So ':19' means '0 to 19'...
    PORTS=":19"				# Block: 0-19
    PORTS="$PORTS 26:52"		# Open:  ssh, telnet, smtp
    PORTS="$PORTS 54:79"		# Open:  domain
    PORTS="$PORTS 81:87"		# Open:  http
    PORTS="$PORTS 89:109"		# Open:  kerberos, pop3
    PORTS="$PORTS 111"			# Close: SunRPC
    PORTS="$PORTS 115:142"		# Open:  Auth, SFTP
    PORTS="$PORTS 144:388"		# Open:  ldap
    PORTS="$PORTS 390:442"		# Open:  imap2
    PORTS="$PORTS 444:635"		# Open:  https
    PORTS="$PORTS 637:992"		# Open:  ldaps
    PORTS="$PORTS 994"			# Open:  imaps
    PORTS="$PORTS 996:1023"		# Open:  pop3s
    PORTS="$PORTS 1061 1214 1832"	# Block: Crappy filesharing protocols
    PORTS="$PORTS 3306"			# Block: mysql
    PORTS="$PORTS 6000"			# Block: X11
    
    # ----- PORTS TO ALLOW ON LOCAL NET -----
    ALLOW="137:139"			# SMB/Samba
    ALLOW="$ALLOW 2988"			# AFbackup system
    
    echo "done."
else
    # Load the config file...
    echo -n "Loading the firewall config file... "
    . /etc/firewall.conf
    echo "done."
fi


# -------
# DONE WITH LOCAL CONFIGURATIONS. DON'T CHANGE ANYTHING BELOW!
# -------


# --------------------------------
# Output the error message, and exit with error code
error () {
    code=$1
    shift
    msg=$*

    echo $msg
    exit $code
}

# --------------------------------
# Find the IP address on the external interface
get_ip () {
    # Get the external IP address
    set -- `ifconfig $EXTERNAL_ETH | grep inet`; shift
    EXTERNAL_IP=`echo $1 | sed 's@addr:@@'`
    EXTERNAL_NET="$EXTERNAL_IP/$EXTERNAL_NET"

    # Get the internal IP address
    if [ "$INTERNAL_ETH" != "" ]; then
	set -- `ifconfig $INTERNAL_ETH | grep inet`; shift
	INTERNAL_IP=`echo $1 | sed 's@addr:@@'`
	INTERNAL_NET="$INTERNAL_IP/$INTERNAL_NET"
    fi

    # Return ok if we have an external IP, and the internal IP is found
    # If we haven't specified a internal ethernet interface, ignore the
    # unavilible internal IP...
    if [ "$EXTERNAL_IP" == "" -o "$INTERNAL_IP" == "" -a "$INTERNAL_ETH" != "" ]; then
        return 0
    fi

    # We have failed to obtain the IP addresses!
    return 1
}

# --------------------------------
# This is the main logic. Add/Remove the firewall rules we specify in the
# config file
chains () {
    if [ "$1" = "add" ]; then
        CHAIN="-A INPUT "
	ECHO="Setting up"
    else
        CHAIN="-D INPUT "
	ECHO="Removing"
    fi
    CHAIN="$IPTABLES $CHAIN"


    # -------------
    # Some local exeptions
    if [ "$EXTERNAL_NET" != "" -a "$ALLOW" != "" ]; then
	echo -n "$ECHO local accepts: "

	for port in $ALLOW; do
	    echo -n "$port "
	    if [ "$EXTERNAL_NET" != "" ]; then
		$CHAIN -i $EXTERNAL_ETH -s $EXTERNAL_NET -d $EXTERNAL_IP -j ACCEPT --protocol tcp --dport $port
		$CHAIN -i $EXTERNAL_ETH -s $EXTERNAL_NET -d $EXTERNAL_IP -j ACCEPT --protocol udp --dport $port
	    fi
	done
	echo " done."
    fi

    # -------------
    # Setting up accepts on PORT to/from our local network
    if [ "$INTERNAL_NET" != "" -a "$INTERNAL_ETH" != "" ]; then
	echo -n "$ECHO accept to/from the internal network: "

	for port in $PORTS; do
	    echo -n "$port "
	    $CHAIN -i $INTERNAL_ETH -s $INTERNAL_NET -d $INTERNAL_IP -j ACCEPT --protocol tcp --dport $port
	    $CHAIN -i $INTERNAL_ETH -s $INTERNAL_NET -d $INTERNAL_IP -j ACCEPT --protocol udp --dport $port
	done
	echo
    fi

    # -------------
    # Special circumstances - friendly hosts outside the external network
    if [ ! -z "$FRIENDLY" ]; then
	echo -n "$ECHO friendly hosts: "
	for friend in $FRIENDLY; do
	    echo -n "$friend "

	    set -- `echo $friend | sed 's@:@ @g'` ; host=$1 ; port=$2
	    $CHAIN -i $EXTERNAL_ETH -s $host -d $EXTERNAL_IP -j ACCEPT --protocol tcp --dport $port
	    $CHAIN -i $EXTERNAL_ETH -s $host -d $EXTERNAL_IP -j ACCEPT --protocol udp --dport $port
	done
	echo
    fi

    # -------------
    # Setting up TCP rejects
    echo -n "$ECHO TCP rejects on external IP: "
    for port in $PORTS; do
	echo -n "$port "
	$CHAIN -i $EXTERNAL_ETH -s 0/0 -d $EXTERNAL_IP -j REJECT --reject-with tcp-reset --protocol tcp --dport $port
    done
    echo "."

    # -------------
    # Setting up UDP rejects
    echo -n "$ECHO UDP rejects on external IP: "
    for port in $PORTS; do
	echo -n "$port "
	$CHAIN -i $EXTERNAL_ETH -s 0/0 -d $EXTERNAL_IP -j DROP  --protocol udp --dport $port
    done
    echo "."
}

# --------------------------------
# Make sure we have the binaries...
if [ ! -x `echo $IPTABLES | sed 's@\ .*@@'` -o ! -x `echo $RMMOD | sed 's@\ .*@@'` -o ! -x `echo $MODPROBE | sed 's@\ .*@@'` ]; then
    echo "Some (or all) executables don't exists or isn't executable..."
    exit 1
fi

# --------------------------------
# Are we running a iptables enabled kernel!?
if ! cat /proc/ksyms | grep -q ip_tables; then
    # Module not loaded, or no support for ip tables...

    if [ ! -f "/lib/modules/`uname -r`/kernel/net/ipv4/netfilter/ip_tables.o" ]; then
	echo "You're not running a iptables enabled kernel!"
	exit 2
    else
	modprobe ip_tables
    fi
fi

#####################################
#                                   #
# M A I N  P R O G R A M  B E L O W #
#                                   #
#####################################

# Get the required IP addresses (internal/external)
get_ip && error 1 "Error in getting IP address(es)..."

case "$1" in
    start)
	# Set up TCP/UDP rejects and accepts
	chains add

	# -------------
	# Do portforwarding
	if [ "$PORTS_FW" != "" ]; then
	    echo -n "Forwarding external port: "
	    for entry in $PORTS_FW; do
		set -- `echo $entry | sed 's@:@ @g'`
		echo -n "$1->$2:$3 "
		$IPTABLES -t nat -A PREROUTING -p tcp -d $EXTERNAL_IP --dport $1 -j DNAT --to $2:$3
	    done
	    echo ""
	fi

	# -------------
	# Masquerade internal traffic
	if [ "$INTERNAL_NET" != "" -a "$INTERNAL_ETH" != "" ]; then
	    echo -n "Setting up masquerading of network $INTERNAL_NET on $INTERNAL_ETH... "
	    echo 1 > /proc/sys/net/ipv4/ip_forward 
	    $MODPROBE ip_nat_ftp
	    $MODPROBE ip_nat_irc

	    $IPTABLES -t nat -A POSTROUTING -s $INTERNAL_NET -d 0/0 -j MASQUERADE
	    echo "done."

	    if [ "$PPTP_SERVER" != "" -a "$PPTP_CLIENT" != "" ]; then
		echo -n "VPN masquerading $PPTP_CLIENT to $PPTP_SERVER: "
		$MODPROBE ip_nat_pptp
		$IPTABLES -t nat -A PREROUTING -p tcp --dport 1723 -j DNAT --top $PPTP_CLIENT
		$IPTABLES -t nat -A PREROUTING -p 47 -j DNAT --top $PPTP_CLIENT
		echo "done."
	    fi
	fi

	# -------------
	# Enable the transparent proxy (force all connection through the proxy)
	if [ ! -z "$TRANS_PROXY" -a "$TRANS_PROXY" != "0" ]; then
	    echo -n "Setting up transparent proxy: "
	    $IPTABLES -t nat -A PREROUTING -s $INTERNAL_NET -d 0/0 --protocol tcp --destination-port 80 -j REDIRECT --to-ports $TRANS_PROXY
	    echo "done."
	fi

	# -------------
	# Execute local scripts
	if [ -x "$0.local" ]; then
	    $0.local start
	fi

	# -------------
	# Block specific hosts. Probably spammers/portscanners...
	if [ -f "/etc/firewall.block.conf" -a -x "/usr/local/sbin/reject_ip" ]; then
	    /usr/local/sbin/reject_ip add
	fi
	;;
    stop)
	# Remove the TCP/UDP rejects and accepts
	chains del

	# -------------
	# Disable the portforwarding
	if [ "$PORTS_FW" != "" ]; then
	    echo -n "Removing port forwarding of port: "
	    for entry in $PORTS_FW; do
		set -- `echo $entry | sed 's@:@ @g'`
		echo -n "$1 "
		$IPTABLES -t nat -D PREROUTING -p tcp -d $EXTERNAL_IP --dport $1 -j DNAT  --to $2:$3
	    done
	    echo "done."
	fi

	# -------------
	# Portforwarding of internal traffic
	if [ "$INTERNAL_NET" != "" ]; then
	    echo -n "Removing internal network masquerading... "
	    $IPTABLES -t nat -D POSTROUTING -s $INTERNAL_NET -d 0/0 -j MASQUERADE

	    echo 0 > /proc/sys/net/ipv4/ip_forward 

	    if [ "$PPTP_SERVER" != "" -a "$PPTP_CLIENT" != "" ]; then
		$IPTABLES -t nat -D PREROUTING -p tcp --dport 1723 -j DNAT --top $PPTP_CLIENT
		$IPTABLES -t nat -D PREROUTING -p 47 -j DNAT --top $PPTP_CLIENT

	    fi
	    echo "done."

	    echo -n "Unloading module: "
	    for module in "ip_nat_ftp ip_conntrack_ftp ip_nat_irc ip_conntrack_irc ip_nat_pptp ip_conntrack_pptp ipt_MASQUERADE iptable_nat ip_conntrack ipt_REJECT iptable_filter ip_tables"; do
		echo -n "$module "
		$RMMOD $module > /dev/null 2>&1
	    done
	    echo
	fi

	# -------------
	# Execute local scripts
	if [ -x "$0.local" ]; then
	    $0.local stop
	fi
	;;
    flush)
	echo -n "Flushing firewall rules... "
	$IPTABLES -F
	$IPTABLES -F -t nat
	echo "done."
	;;
    *)
	echo "Usage: $0 {start|stop}" >&2
	;;
esac
exit 0

# $Log: firewall,v $
# Revision 1.18  2003-10-31 09:13:32  turbo
# Missing ] in 'if then fi'...
#
# Revision 1.17  2003/10/31 09:01:57  turbo
# Possibility to add 'friendly hosts'. That is, hosts that should be exepted
# (on a port basis) from the ordinary block/reject rules..
# Example: From work I'd like to connect to NTop. Naturally, this port should
#          be absolutly hidden for the rest of the world. I don't even want my
#          home network access!!
#
# Revision 1.16  2002/09/07 14:09:42  turbo
# Unload the modules in the correct order. Can't remove
# ipt_REJECT before the iptable_nat (etc)..
#
# Revision 1.15  2002/06/25 09:00:48  turbo
# * Don't output 'done.' when removing/setting up UDP/TCP rejects etc.
#   Just '.' and newline. Looks better.
# * Make sure that TRANS_PROXY don't contain '0' (which would mean that
#   we want to disable this feature).
# * Remove some more module (ipt_MASQUERADE, ipt_REJECT, iptable_filter)
#   BEFORE removing iptable_nat etc. Dependencies...
#
# Revision 1.14  2002/06/25 08:37:06  turbo
# * We can't send STD{OUT,ERR} to /dev/null. For some reason
#   the commandline think it's a module to remove. I'll look into
#   that some other time...
# * Output the correct lead text if removing/setting up firewall,
#   by using different ECHO variable content.
# * Don't output a newline if removing portforwarding (lead text).
#
# Revision 1.13  2002/03/04 12:07:49  turbo
# If we have the file /etc/firewall.block.conf AND /usr/local/sbin/reject_ip is executable, block certain hosts (spammers and/or portscanners probably)
#
# Revision 1.12  2002/03/04 11:24:22  turbo
# Added the transparent proxy support. The variable TRANS_PROXY is the
# proxy port...
# Removed the template TRANS_PROXY, it's specified in the config file...
#
# Revision 1.11  2002/03/03 23:06:51  turbo
# * Only setup the local accepts if the variable ALLOW is non-null.
# * Output the ports we're doing local accept on.
# * Be more clear about the rejects entries (... on external/internal IP).
# * Uncomment the iptables entries for PPTP server masquerading.
#   The 'if/fi' block failed othervise...
#
# Revision 1.10  2002/03/03 21:34:53  turbo
# Remove the ip_conntrack_pptp as well when disabling masquerading.
#
# Revision 1.9  2002/03/03 21:27:34  turbo
# * Since we added a redirect of stdout and stderr, we must filter out everything
#   after the first space when checking for executable binary...
# * Stray 'c' character after the get_ip() call.
#
# Revision 1.8  2002/03/03 21:17:07  turbo
# * Send all output from rmmod/modprobe to /dev/null.
# * Load the ip_nat_irc module if forwarding/masquerading.
# * If masquerading to a PPTP server, load the ip_nat_pptp module, not
#   iptable_nat.
# * Remove the modules in right order. ip_nat* first, then the ip_conntrack*.
#   Do this in a for loop.
#
# Revision 1.7  2002/03/03 21:05:13  turbo
# We might have ip tables as a module, so if we don't have the support in
# the kernel (/proc/ksyms), we check to see if we have the actual module
# (in /lib/modules/KERNELVER/kernel/net/ipv4/netfilter).
#
# Revision 1.6  2002/03/03 19:27:28  turbo
# Add the variable to the variable. The last line overwrote the previous!
#
# Revision 1.5  2002/03/03 19:22:51  turbo
# Removed the undefined defaults. They are specified in the config file...
#
# Revision 1.4  2002/03/03 19:09:20  turbo
# * Check to see if the local firewall setup script is EXECUTABLE, not EXISTING.
# * More comment lines before major executions
# * Run the local script when stopping firewall as well
#
# Revision 1.3  2002/03/03 18:55:11  turbo
# * Added some comment lines before each major command to distinguish them
# * We're only modifying the INPUT chain in the chains() function, so include
#   that into the short hand ($CHAIN) at the top (so we can improve easily on
#   the function).
# * Make sure we call get_ip() wheter we're called with start or stop...
# * Put the execution of the local script at the end (after setting up
#   transparent proxy).
#
# Revision 1.2  2002/03/03 18:09:16  turbo
# * Pretty output when loading default/config file
# * Created an error() function that outputs an error message and exits with
#   specified error code.
# * Added CVS keywords Id and Log.
#
